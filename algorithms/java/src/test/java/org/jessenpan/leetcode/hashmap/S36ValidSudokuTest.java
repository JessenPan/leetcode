package org.jessenpan.leetcode.hashmap;

import org.junit.Assert;
import org.junit.Test;

/**
 * @author jessenpan
 */
public class S36ValidSudokuTest {

    private S36ValidSudoku validSudoku = new S36ValidSudoku();

    @Test
    public void test1() {
        boolean isValid = validSudoku.isValidSudoku(new char[][] { { '5', '3', '.', '.', '7', '.', '.', '.', '.' }, { '6', '.', '.', '1', '9', '5', '.', '.', '.' }, { '.', '9', '8', '.', '.', '.', '.', '6', '.' }, { '8', '.', '.', '.', '6', '.', '.', '.', '3' }, { '4', '.', '.', '8', '.', '3', '.', '.', '1' }, { '7', '.', '.', '.', '2', '.', '.', '.', '6' }, { '.', '6', '.', '.', '.', '.', '2', '8', '.' }, { '.', '.', '.', '4', '1', '9', '.', '.', '5' }, { '.', '.', '.', '.', '8', '.', '.', '7', '9' } });
        Assert.assertTrue(isValid);
    }

    @Test
    public void test2() {
        boolean isValid = validSudoku.isValidSudoku(new char[][] { { '8', '3', '.', '.', '7', '.', '.', '.', '.' }, { '6', '.', '.', '1', '9', '5', '.', '.', '.' }, { '.', '9', '8', '.', '.', '.', '.', '6', '.' }, { '8', '.', '.', '.', '6', '.', '.', '.', '3' }, { '4', '.', '.', '8', '.', '3', '.', '.', '1' }, { '7', '.', '.', '.', '2', '.', '.', '.', '6' }, { '.', '6', '.', '.', '.', '.', '2', '8', '.' }, { '.', '.', '.', '4', '1', '9', '.', '.', '5' }, { '.', '.', '.', '.', '8', '.', '.', '7', '9' } });
        Assert.assertFalse(isValid);
    }

    @Test
    public void test3() {
        boolean isValid = validSudoku.isValidSudoku(new char[][] { { '.', '.', '.', '.', '5', '.', '.', '1', '.' }, 
                                                                   { '.', '4', '.', '3', '.', '.', '.', '.', '.' }, 
                                                                   { '.', '.', '.', '.', '.', '3', '.', '.', '1' }, 
                                                                   { '8', '.', '.', '.', '.', '.', '.', '2', '.' }, 
                                                                   { '.', '.', '2', '.', '7', '.', '.', '.', '.' }, 
                                                                   { '.', '1', '5', '.', '.', '.', '.', '.', '.' }, 
                                                                   { '.', '.', '.', '.', '.', '2', '.', '.', '.' }, 
                                                                   { '.', '2', '.', '9', '.', '.', '.', '.', '.' }, 
                                                                   { '.', '.', '4', '.', '.', '.', '.', '.', '.' } });
        Assert.assertFalse(isValid);
    }

    
    
    
    
}
