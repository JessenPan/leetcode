package org.jessenpan.leetcode.dp;

import org.junit.Assert;
import org.junit.Test;

/**
 * @author jessenpan
 */
public class S32LongestValidParenthesesTest {

    private S32LongestValidParentheses longestValidParentheses = new S32LongestValidParentheses();

    @Test
    public void test1() {
        int t = longestValidParentheses.longestValidParentheses("(()");
        Assert.assertEquals(2, t);
    }

    @Test
    public void test2() {
        int t = longestValidParentheses.longestValidParentheses(")()())");
        Assert.assertEquals(4, t);
    }

    @Test
    public void test3() {
        int t = longestValidParentheses.longestValidParentheses("()()");
        Assert.assertEquals(4, t);
    }

    @Test
    public void test4() {
        int t = longestValidParentheses.longestValidParentheses(")(");
        Assert.assertEquals(0, t);
    }
    
    @Test
    public void test5() {
        int t = longestValidParentheses.longestValidParentheses(

        Assert.assertEquals(310, t);
    }

}
